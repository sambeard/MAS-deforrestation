extensions [ cf ]
breed [ citizens citizen ]

globals [
  patch-list
]

citizens-own [target targetType]; citizen parameters

to setup-agents
  initialize-citizens initial-amount-of-citizens
  setup-free-patches
end

to update-agents
  ;if count patches with [ ptype = "forestBorder"] = 0 [ stop ]
  ask citizens [
    (cf:ifelse
      ; if target patch has changed 
      target = nobody [set-new-target]
      [ptype] of target != targetType [set-new-target]
      ;; if citizen on his target
      distance target = 0 [perform-action get-new-action]
      [move-towards-target]
      )
  ]
end

to setup-free-patches
  set patch-list (reduce [[l p] -> ifelse-value (p = 0) [(list)] [lput p l] ] (list (sort-on [patch-index] patches)))
end

to-report patch-index
  report world-width * pycor + pxcor
end

;; CITIZEN RELATED
;; ===================

to add-citizen
  initialize-citizens 1
end

to initialize-citizens [amount]
  create-citizens amount [
    set shape "person"
    set size 3
    set target a-city-patch
    set targetType "city"
    let current a-city-patch
    setxy ([pxcor] of current) ([pycor] of current)
    face target
  ]
  show count turtles
end

to remove-citizen
  ask one-of citizens [die]
end

;; ACTION RELATED
;; ==================
to chop-forest
  set ptype "young forest"
  after-change-patch
end

to move-towards-target
  if(target != nobody)[
    face target
    ifelse distance target <= movement-speed
      [ move-to target ]
      [ fd movement-speed ]
  ]
end

to perform-action
  let pt get-ptype
  (cf:ifelse
    pt = "old forest" [chop-forest]
    []
  )
end

to get-new-action
  set targetType ifelse-value (get-ptype = "city")
    ["old forest"]
    ["city"]
  set-new-target
end

to set-new-target
  let prev target
  let tt targetType
  set target closest-patch unattended-patches with [ptype = tt]
  if(prev != nobody)
    [ set patch-list replace-item [patch-index] of prev patch-list prev ]
  if(target != nobody)
    [ set patch-list replace-item [patch-index] of target patch-list nobody ]
  
end

;; PATCH RELATED
;; ===================
to-report get-ptype 
  report [ptype] of patch-here
end

to-report unattended-patches
  ; patch-set automatically filters out all non patch entries (eg nobodies)
  report patch-set patch-list 
end
  

to-report closest-patch [patchset]
  ifelse (any? patchset )[
    let ph patch-here
    report first sort-on [distance ph] patchset
  ]
  [report nobody]
end

to-report a-city-patch
  report one-of patches with [ptype = "city"]
end