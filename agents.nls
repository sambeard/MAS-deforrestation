extensions [ cf ]
breed [ foresters forester ]
breed [ farmers farmer]

globals [
  patch-list
  government-money
  community-money
  last-tick-breed
  last-tick-zero
  dead-agents
  breeded-agents
]

turtles-own [ target targetType task task-list inventory]; forester parameters
farmers-own [ seeds ]; farmers parameters


to setup-agents
  initialize-foresters initial-amount-of-foresters
  initialize-farmers initial-amount-of-farmers
  setup-free-patches
  set government-money 1000
  set community-money 1000
  set last-tick-breed ticks
  set last-tick-zero ticks
  set dead-agents 0
end

to update-agents
  ask turtles [
    (cf:ifelse
      task = "" [get-new-task]
      target = nobody [set-new-target]
      ; if target patch has changed 
      [ptype] of target != get-patch-type-for-task task [set-new-target]
      ;; if forester on his target
      distance target = 0 [perform-task release-target target]
      [move-towards-target]
      )
  ]
    update-community-money
end


to update-community-money
  set community-money community-money - (count turtles) * living-cost 
  (cf:ifelse 
    (community-money) <= 0 and (ticks - last-tick-zero >= ticks-below-zero) [
      remove-turtle one-of turtles
      set dead-agents dead-agents + 1
      set last-tick-zero ticks
    ]
    (community-money) <= 0 and (ticks - last-tick-zero < ticks-below-zero)[]
    (community-money >= 0) or (community-money > 0) [set last-tick-zero ticks]
  )
  (cf:ifelse 
    (community-money) >= breeding-money and (ticks - last-tick-breed >= ticks-below-zero) [
      let probability random-float 1
    
      (cf:ifelse 
        probability >= 0.5 [add-forester]
        probability < 0.5 [add-farmer]
      )
      set breeded-agents breeded-agents + 1
      set last-tick-breed ticks
    ]
    (community-money) >= breeding-money and (ticks - last-tick-breed < ticks-below-zero)[]
    (community-money >= breeding-money) or (community-money < breeding-money) [set last-tick-breed ticks]
   )
end
;; AGENT RELATED
;; ===================


to add-forester
  initialize-foresters 1
end

to add-farmer
  initialize-farmers 1
end

to initialize-foresters [amount]
  create-foresters amount [
    setup-agent
    set color 54 ;; yellow
  ]
  ;;show count turtles
end

to initialize-farmers [amount]
  create-farmers amount [
    setup-agent
    set color 45 ;; yellow
    set seeds max-seeds
  ]
end

to setup-agent
  set shape "person"
  set size 3
  set target a-city-expansion-patch
  ask target [set ptype "city" color-patch]
  set task "go home"
  set task-list []
  let current a-city-patch
  setxy ([pxcor] of current) ([pycor] of current)
  face target 
end

to remove-turtle [t]
  ask a-city-removal-patch [set ptype "wasteland" color-patch]
  ask t [release-target target die]
end

to remove-forester
  remove-turtle one-of foresters
end

to remove-farmer
  remove-turtle one-of farmers
end

to-report has-inventory?
  report inventory != ""
end

;; TASK RELATED
;; ==================
to-report get-patch-type-for-task [t]
  report (ifelse-value
    t = "chop forest" ["old forest"]
    t = "replant forest" ["wasteland"]
    t = "plant seeds" ["wasteland"]
    t = "harvest crops" ["crops"]
    t = "ignite forest" ["young forest"]
    t = "get seeds" ["city"]
    t = "deliver crops" ["city"]
    t = "deliver logs" ["city"]
    t = "go home" ["city"]
    [ nobody] ; break on this
  )
end 

to chop-forest
  set ptype "young forest"
  set inventory "logs"
  after-change-patch
end

to planting-crops
  set ptype "farmland"
  after-change-patch
  set seeds seeds - 1
  if(seeds = 0) [set color red]
end

to get-seeds
  if(community-money > seed-cost)[
    set seeds (min (list (int community-money / (seed-cost)) max-seeds))
    set community-money (community-money - seeds * seed-cost)
    set color 45; yellow
    set task ""
  ]
end

to ask-to-ignite
  if (random 100 < ask-to-light-chance and government-money > ignite-cost)
  [
    ; choose best spot
    let best-patch min-one-of (patches with [ptype = "young forest" and (item patch-index patch-list) != nobody and (distance myself <= max-travel-distance)] ) [distance myself]
    if( is-patch? best-patch)
    [
      ; find closest forester
      let closest-forester min-one-of foresters with [distance best-patch <= max-travel-distance and (target = nobody or distance target > 0) and task != "ignite forest"] [distance best-patch]
      ; ask to ignite
      if(is-forester? closest-forester)
      [
        ask closest-forester [
          ; set current work aside
          let ctask task
          let ctarget target
          set task-list fput (list ctask ctarget) task-list
          release-target ctarget
          ; set new task
          set task "ignite forest"
          set target best-patch
          ; withdraw money
          set government-money (government-money - ignite-cost)
          claim-target target
        ]
      ]
    ]
  ]  
end

to replant-forest
  if(government-money > reforest-cost)[
    set ptype "young forest"
    set government-money (government-money - (reforest-cost))
    after-change-patch
  ]
end

to harvest-crops
  let rand random 100
  
  ifelse rand > probability-to-turn-into-wasteland and seeds > 0
    [set ptype "farmland"]
    [set ptype "wasteland"]

  set inventory "crops"
  after-change-patch
end

to deliver-inventory
  (cf:ifelse 
    inventory = "logs" [
      set community-money community-money + (logs-selling-value * (1 - taxes-value))
      set government-money government-money + (logs-selling-value * (taxes-value))
    ] ;;LOGS give 2 money points
    inventory  = "crops" [set community-money community-money + (crops-selling-value * (1 - taxes-value))
      set government-money government-money + (crops-selling-value * (taxes-value))] ;; Crops give 1 money point
    inventory = "" []
  )
  set inventory ""
end

to move-towards-target
  if(target != nobody)[
    face target
    ifelse distance target <= movement-speed
      [ move-to target ]
      [ fd movement-speed ]
  ]
end


to perform-task
  (cf:ifelse
    task = "chop forest" [chop-forest]
    task = "plant seeds" [planting-crops]
    task = "harvest crops" [harvest-crops]
    task = "replant forest" [replant-forest]
    task = "get seeds" [get-seeds]
    task = "ignite forest" [ignite]
    task = "deliver crops" [deliver-inventory];; also implement 'selling' of crops
    task = "deliver logs" [deliver-inventory];; also implement 'selling' of logs
    task = "relocate" []
    task = "go home" [if is-farmer? self [ask-to-ignite]]
    []
  )
  set task ""
end

to get-new-task 
  if empty? task-list
  [
    let wasteland closest-available-patch "wasteland"
    ifelse is-farmer? self [
      let field closest-available-patch "crops"
      let young-forest closest-available-patch "young forest"
      set task-list lput (ifelse-value 
        has-inventory? [(list "deliver crops" nobody)]
        field != nobody [(list "harvest crops" field)]
        seeds = 0 and community-money > seed-cost * max-seeds  [(list "get seeds" nobody)]  
        wasteland != nobody and seeds > 0 [(list "plant seeds" field)]  
        random 100 < relocate-chance [(list "relocate" a-city-patch)]
        [(list "go home" nobody)]   
      ) task-list
    ]
    ; is forester
    [
      let old-forest closest-available-patch "old forest"
      set task-list lput (ifelse-value 
        inventory = "logs" [(list "deliver logs" nobody)]
        old-forest != nobody [(list "chop forest" old-forest)]
        wasteland != nobody and (random 100 < reforest-chance) [(list "replant forest" wasteland)]
        random 100 < relocate-chance [(list "relocate" a-city-patch)]
        [(list "go home" nobody)]
      ) task-list
    ]
  ]
  get-next-task
  ifelse (target = nobody)
    [set-new-target]
    [claim-target target]
end

to get-next-task
  let next first task-list
  set task item 0 next
  set target item 1 next
  set task-list butfirst task-list
end

to set-new-target
  if(target != nobody) [release-target target]
  let tt get-patch-type-for-task task
  set target closest-patch unattended-patches with [ptype = tt and ifelse-value (tt = "city")[true][distance myself <= max-travel-distance]]
  ifelse (target = nobody) 
    ; clear task if no patches left to harvest
    [if(task = "harvest crops") [set task ""]]
    [claim-target target]
end

to release-target [t]
  if(is-patch? t)
  [set patch-list replace-item [patch-index] of t patch-list t]
end

to claim-target [t]
  if(is-patch? t)
  [set patch-list replace-item [patch-index] of t patch-list nobody]
end


;; PATCH RELATED
;; ===================
to-report get-ptype 
  report [ptype] of patch-here
end

to-report a-city-expansion-patch
  let cps patches with [ptype != "city" and ptype != "river" and any? neighbors with [ptype = "city"]]
  let wps patches with [ptype != "city" and ptype != "river" and any? neighbors with [ptype = "river"]]
  let ps ifelse-value (random 100 < create-new-town-chance)
    [wps]
    [cps]
  report one-of ps
end

to-report a-city-removal-patch
  let ps patches with [ptype = "city" and any? neighbors with [ptype = "city"] and not all? neighbors [ptype = "city"]]
  report one-of ps
end
  
to-report unattended-patches
  ; patch-set automatically filters out all non patch entries (eg nobodies)
  report patch-set filter is-patch? patch-list 
end
  
to-report closest-available-patch [patch-type]
  report closest-patch patches with [ptype = patch-type and (item patch-index patch-list) != nobody and distance myself <= max-travel-distance]
end

to-report closest-patch [patchset]
  ifelse (any? patchset )[
    let ph patch-here
    report first sort-on [distance ph] patchset
  ]
  [report nobody]
end

to-report a-city-patch
  report one-of patches with [ptype = "city"]
end

to setup-free-patches
  set patch-list (reduce [[l p] -> ifelse-value (p = 0) [(list)] [lput p l] ] (list (sort-on [patch-index] patches)))
end

to-report patch-index
  report world-width * pycor + pxcor
end


