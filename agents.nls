extensions [ cf ]
breed [ citizens citizen ]
breed [ farmers farmer]

globals [
  patch-list
]

citizens-own [target targetType]; citizen parameters

farmers-own [target targetType seeds]; farmers parameters


to setup-agents
  initialize-citizens initial-amount-of-citizens
  initialize-farmers initial-amount-of-farmers
  setup-free-patches
end

to update-agents
  ask turtles [
    (cf:ifelse
      target = nobody [set-new-target]
      ; if target patch has changed 
      [ptype] of target != targetType [set-new-target]
      ;; if citizen on his target
      distance target = 0 [perform-action get-new-action]
      [move-towards-target]
      )
  ]
  
  call-farmers
end

to setup-free-patches
  set patch-list (reduce [[l p] -> ifelse-value (p = 0) [(list)] [lput p l] ] (list (sort-on [patch-index] patches)))
end

to-report patch-index
  report world-width * pycor + pxcor
end

;; CITIZEN RELATED
;; ===================

to add-citizen
  initialize-citizens 1
end

to add-farmer
  initialize-farmers 1
end

to initialize-citizens [amount]
  create-citizens amount [
    setup-agent
    set color 54 ;; yellow
  ]
  ;;show count turtles
end

to initialize-farmers [amount]
  create-farmers amount [
    setup-agent
    set color 45 ;; yellow
    set seeds max-seeds
  ]
end

to setup-agent
  set shape "person"
  set size 3
  set target a-city-patch
  set targetType "city"
  let current a-city-patch
  setxy ([pxcor] of current) ([pycor] of current)
  face target 
end

to remove-citizen
  ask one-of citizens [die]
end

to remove-farmer
  ask one-of farmers [die]
end

;; TASK RELATED
;; ==================
to-report get-patch-type-for-task [task]
  report (ifelse-value
    task = "chop wood" ["old forest"]
    task = "get water" ["river"]
    task = "water patch" ["farmland"]
    task = "harvest crops" ["crops"]
    task = "ignite patch" ["young forest"]
    task = "go home" ["city"]
    [ nobody] ; break on this
  )
end 

to chop-forest
  set ptype "young forest"
  after-change-patch
end

to planting-crops
  
  ifelse seeds > 0
  [set ptype "farmland"
  after-change-patch
  set seeds seeds - 1
  ]
  [
    set targetType "city"
    set target a-city-patch
    show "no more seeds"
    set color 15; yellow
  ]
end

to harvest-crops
  let rand random 100
  
  ifelse rand > probability-to-turn-into-wasteland and seeds > 0
    [set ptype "farmland"]
  
  after-change-patch

end

to move-towards-target
  if(target != nobody)[
    face target
    ifelse distance target <= movement-speed
      [ move-to target ]
      [ fd movement-speed ]
  ]
end



to perform-action
  let pt get-ptype
  (cf:ifelse
    pt = "old forest" [chop-forest]
    pt = "wasteland" [planting-crops]
    pt = "crops" [harvest-crops]
    []
  )
end

to get-new-action
  if is-farmer? self [
    
    if get-ptype = "city"[
      set seeds max-seeds
      set color 45; yellow
      set targetType "wasteland"
    ]
    
    ;set targetType ifelse-value (get-ptype = "city")
    ;["wasteland"]
   ; ["city"]
    set-new-target
  ]
  if is-citizen? self [
    set targetType ifelse-value (get-ptype = "city")
    ["old forest"]
    ["city"]
    set-new-target
  ]
  
end

to set-new-target
  let prev target
  let tt targetType
  set target closest-patch unattended-patches with [ptype = tt]
  if(prev != nobody)
    [ set patch-list replace-item [patch-index] of prev patch-list prev ]
  if(target != nobody)
    [ set patch-list replace-item [patch-index] of target patch-list nobody ]
end

;; PATCH RELATED
;; ===================
to-report get-ptype 
  report [ptype] of patch-here
end

to-report unattended-patches
  ; patch-set automatically filters out all non patch entries (eg nobodies)
  report patch-set patch-list 
end
  

to-report closest-patch [patchset]
  ifelse (any? patchset )[
    let ph patch-here
    report first sort-on [distance ph] patchset
  ]
  [report nobody]
end

to-report a-city-patch
  report one-of patches with [ptype = "city"]
end

to-report a-wasteland-patch
  report one-of patches with [ptype = "wasteland"]
end


to call-farmers
  ask patches with [ptype = "crops"] [
    let closest-farmer min-one-of farmers with [ptype != "crops"] [distance myself]
    
    ask closest-farmer [
      set targetType "crops"
      set target myself 
    ]   
  ]
end


